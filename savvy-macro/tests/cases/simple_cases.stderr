error: function must have return type
 --> tests/cases/simple_cases.rs:6:1
  |
6 | #[savvy]
  | ^^^^^^^^
  |
  = note: this error originates in the attribute macro `savvy` (in Nightly builds, run with -Z macro-backtrace for more info)

error: the return type must be savvy::Result<T> or savvy::Result<()>
  --> tests/cases/simple_cases.rs:10:30
   |
10 | fn wrong_return_type(x: i32) -> i32 {}
   |                              ^^^^^^

error: `Owned-` types are not allowed here. Did you mean `IntegerSexp`?
  --> tests/cases/simple_cases.rs:13:28
   |
13 | fn wrong_type_owned_int(x: OwnedIntegerSexp) -> savvy::Result<()> {
   |                            ^^^^^^^^^^^^^^^^

error: `Owned-` types are not allowed here. Did you mean `RealSexp`?
  --> tests/cases/simple_cases.rs:18:29
   |
18 | fn wrong_type_owned_real(x: OwnedRealSexp) -> savvy::Result<()> {
   |                             ^^^^^^^^^^^^^

error: `Owned-` types are not allowed here. Did you mean `LogicalSexp`?
  --> tests/cases/simple_cases.rs:23:32
   |
23 | fn wrong_type_owned_logical(x: OwnedLogicalSexp) -> savvy::Result<()> {
   |                                ^^^^^^^^^^^^^^^^

error: `Owned-` types are not allowed here. Did you mean `StringSexp`?
  --> tests/cases/simple_cases.rs:28:31
   |
28 | fn wrong_type_owned_string(x: OwnedStringSexp) -> savvy::Result<()> {
   |                               ^^^^^^^^^^^^^^^

error: savvy only supports a fieldless enum
  --> tests/cases/simple_cases.rs:35:6
   |
35 |     A(i32),
   |      ^^^^^

error: savvy doesn't support an enum with discreminant
  --> tests/cases/simple_cases.rs:43:9
   |
43 |     B = 100,
   |         ^^^

error: An initialization function can only accept `*mut DllInfo`
  --> tests/cases/simple_cases.rs:47:20
   |
47 | fn init_wrong_type(x: Foo) {}
   |                    ^^^^^^

error: An initialization function can only accept `*mut DllInfo`
  --> tests/cases/simple_cases.rs:50:21
   |
50 | fn init_wrong_type2(x: DllInfo) {}
   |                     ^^^^^^^^^^

error: An initialization function can only accept `*mut DllInfo`
  --> tests/cases/simple_cases.rs:53:21
   |
53 | fn init_wrong_type3(x: *const DllInfo) {}
   |                     ^^^^^^^^^^^^^^^^^

error: An initialization function cannot have the return value
  --> tests/cases/simple_cases.rs:56:38
   |
56 | fn init_wrong_type3(x: *mut DllInfo) -> Foo {}
   |                                      ^^^^^^
